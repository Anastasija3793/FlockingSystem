#ifndef FLOCK_H
#define FLOCK_H

/// @file Flock.h
/// @brief Library for creating a flock which contains boids with their attributes and sets of flocking behaviour rules
/// @author Anastasija Belaka
/// @version 15.0
/// @date 19/03/2018 Updated to NCCA Coding standard
/// Revision History : https://github.com/Anastasija3793/FlockingSystem
/// Initial Version 05/03/2018

#include <vector>
#include <ngl/Camera.h>
#include <ngl/Vec3.h>
#include "Boid.h"

//----------------------------------------------------------------------------------------------------------------------
/// @class Flock "Flock.h"
/// @brief Flock class which contains Flock constructor, boids attributes, behaviour/rules
/// @author Anastasija Belaka
/// @version 10.0
/// @date  Updated to NCCA Coding standard
/// Revision History : See https://github.com/Anastasija3793/FlockingSystem
//----------------------------------------------------------------------------------------------------------------------
class Flock
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Flock constructor with its own values
    /// @param[in] _pos position of the flock
    /// @param[in] _target target towards which the boids in the flock are going to steer
    /// @param[in] _numBoids the number of boids in the flock
    //----------------------------------------------------------------------------------------------------------------------
    Flock(ngl::Vec3 _pos, ngl::Vec3 _target, int _numBoids);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the dctor
    //----------------------------------------------------------------------------------------------------------------------
    ~Flock();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief update method for updating the flock
    //----------------------------------------------------------------------------------------------------------------------
    void update();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw method for drawing the boid
    /// @param _globalMouseTx is used to interact with camera by mouse
    //----------------------------------------------------------------------------------------------------------------------
    void draw(const ngl::Mat4 &_globalMouseTx);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief setCam method for setting the camera
    /// @param _cam camera
    //----------------------------------------------------------------------------------------------------------------------
    inline void setCam(ngl::Camera *_cam){m_cam=_cam;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getCam getting the camera
    /// @param _cam camera
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::Camera * getCam()const {return m_cam;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief setShaderName method for setting the shader name
    /// @param m_shaderName the name of shader
    //----------------------------------------------------------------------------------------------------------------------
    inline void setShaderName(const std::string &_n){m_shaderName=_n;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getShaderName method for getting the shader name
    /// @param m_shaderName the name of shader
    //----------------------------------------------------------------------------------------------------------------------
    inline const std::string getShaderName()const {return m_shaderName;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief BBoxCollision method checks the collision between boids and bbox
    /// and makes sure boids stay insed the bbox (when collide - bounce)
    //----------------------------------------------------------------------------------------------------------------------
    void BBoxCollision();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the bbox
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::BBox> m_bbox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief normal function for normal/default behaviour of each boid in the flock
    //----------------------------------------------------------------------------------------------------------------------
    void normal();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief steer function for creating the steering behaviour of each boid in the flock
    //----------------------------------------------------------------------------------------------------------------------
    void steer();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief alignment function for applying the alignment rule to each boid
    //----------------------------------------------------------------------------------------------------------------------
    void alignment();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief separation function for applying the separation rule to each boid
    //----------------------------------------------------------------------------------------------------------------------
    void separation();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief cohesion function for applying the cohesion rule to each boid
    //----------------------------------------------------------------------------------------------------------------------
    void cohesion();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief wandering function for applying the wandering behaviour to each boid
    //----------------------------------------------------------------------------------------------------------------------
    void wandering();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resetBBox function reseting the bbox in flock/demo
    //----------------------------------------------------------------------------------------------------------------------
    void resetBBox();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getNeighbours getting the neighbours for each boid (pointing to the container)
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Boid*> getNeighbours(int i);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief getNeighboursSep getting the neighbours with smaller "neighbourhood" for each boid
    /// for separation rule (pointing to the container)
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Boid*> getNeighboursSep(int y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief addBoid function adding a new boid
    /// @param _randomPos the position of added boid (passed by user)
    //----------------------------------------------------------------------------------------------------------------------
    void addBoid(ngl::Vec3 _randomPos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief removeBoid function removing a boid (can remove boids until there is only one)
    //----------------------------------------------------------------------------------------------------------------------
    void removeBoid();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the number of boids
    //----------------------------------------------------------------------------------------------------------------------
    int m_numBoids;

private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the container for the boids
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Boid>m_boids;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the name of the shader to use
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_shaderName;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to the camera used for drawing
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
};

#endif // FLOCK_H
